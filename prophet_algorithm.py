# -*- coding: utf-8 -*-
"""ML-18.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DPrenLLaxywht5bwwsvuHD73an1du4Tq
"""

from sklearn.svm import SVR
import numpy as np
import pandas as pd
from sklearn.svm import LinearSVR
from sklearn.svm import LinearSVC
import matplotlib.pyplot as plt
# plt.style.use('fivethirtyeight')
import matplotlib.dates as mdates
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import accuracy_score
import seaborn as sns
import datetime as dt
from fbprophet import Prophet
# Statsmodels widely known for forecasting than Prophet
import statsmodels.api as sm
from scipy import stats
from plotly import tools
import plotly.figure_factory as ff
import plotly.tools as tls
import plotly.graph_objs as go
from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot
init_notebook_mode(connected=True)
import warnings
warnings.filterwarnings("ignore")

# plt.style.available
plt.style.use("seaborn-whitegrid")


def stock_predict_prophet():
  import pandas as pd


  df=pd.read_csv('Dataset/WIPRO.csv')
  df.shape


  X = pd.read_csv('Dataset/WIPRO.csv', header=0)
  X= X['Date']

  y = pd.read_csv('Dataset/WIPRO.csv', header=0)
  y=y['Prev Close']
  ########### DATE TIME
  df['Date']=pd.to_datetime(df.loc[:,'Date'], format="%Y/%m/%d")
  y=np.array(y)
  df.columns
  df = df.drop(labels=[ 'Symbol', 'Series', 'Open', 'High', 'Low', 'Last',
         'Close', 'VWAP', 'Volume', 'Turnover', 'Trades', 'Deliverable Volume',
         '%Deliverble'],axis =1)

  # First Subplot
  # f, (ax1, ax2) = plt.subplots(1, 2, figsize=(14,5))
  import matplotlib.pyplot as plt
  plt.figure(figsize=(14,8))
  plt.plot(df['Date'],df['Prev Close'])

  plt.xlabel("Date", fontsize=12)
  plt.ylabel("Stock Price")
  plt.title("Wipro Close Price History")

  df=df.tail(1175)
  df.rename(columns={'Prev Close': 'y', 'Date': 'ds'}, inplace=True)

  df.head()
  df1=df
  # df1.tail(1175)
  from fbprophet import Prophet

  m = Prophet()
  m.fit(df)

  # Create Future dates
  future_prices = m.make_future_dataframe(periods=365)

  # Predict Prices
  forecast = m.predict(future_prices)
  forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()

  import matplotlib.dates as mdates

  # Dates
  starting_date = dt.datetime(2020, 10, 1)
  starting_date1 = mdates.date2num(starting_date)
  trend_date = dt.datetime(2021, 5, 7)
  trend_date1 = mdates.date2num(trend_date)

  pointing_arrow = dt.datetime(2020, 10, 1)
  pointing_arrow1 = mdates.date2num(pointing_arrow)

  # Learn more Prophet tomorrow and plot the forecast for Wipro.
  fig = m.plot(forecast)
  ax1 = fig.add_subplot(111)
  ax1.set_title("Wipro Stock Price Forecast", fontsize=16)
  ax1.set_xlabel("Date", fontsize=12)
  ax1.set_ylabel("Close Price", fontsize=12)

  # Forecast initialization arrow
  ax1.annotate('Forecast \n Initialization', xy=(pointing_arrow1, 1350), xytext=(starting_date1,1700),
              arrowprops=dict(facecolor='#ff7f50', shrink=0.1),
              )

  #Trend emphasis arrow
  ax1.annotate('Upward Trend', xy=(trend_date1, 1225), xytext=(trend_date1,950),
              arrowprops=dict(facecolor='#6cff6c', shrink=0.1),
              )

  ax1.axhline(y=140, color='b', linestyle='-')

  plt.show()

  fig2 = m.plot_components(forecast)
  plt.show()

  m = Prophet(changepoint_prior_scale=0.01).fit(df)
  future = m.make_future_dataframe(periods=12, freq='M')
  fcst = m.predict(future)
  fig = m.plot(fcst)
  plt.title("Monthly Prediction \n 1 year time frame")

  plt.show()

  fcst1=fcst.head(1175)

  y_pred = fcst1['trend']
  from sklearn.metrics import mean_absolute_error
  print("MAE",mean_absolute_error(y_pred,df['y']))

  fig = m.plot_components(fcst)
  plt.show()

  """**AXIS BANK**  
  training from 2016 to 2020(september) and preicting for next year 
  """

  df=pd.read_csv('Dataset/AXISBANK.csv')
  df.shape

  X = pd.read_csv('Dataset/AXISBANK.csv', header=0)
  X= X['Date']

  y = pd.read_csv('Dataset/AXISBANK.csv', header=0)
  y=y['Prev Close']

  df['Date']=pd.to_datetime(df.loc[:,'Date'], format="%Y/%m/%d")
  y=np.array(y)
  df.columns
  df = df.drop(labels=[ 'Symbol', 'Series', 'Open', 'High', 'Low', 'Last',
         'Close', 'VWAP', 'Volume', 'Turnover', 'Trades', 'Deliverable Volume',
         '%Deliverble'],axis =1)

  plt.figure(figsize=(14,8))
  plt.plot(df['Date'],df['Prev Close'])

  plt.xlabel("Date", fontsize=12)
  plt.ylabel("Stock Price")
  plt.title("Axis Bank Close Price History")

  df=df.tail(1175)
  df.rename(columns={'Prev Close': 'y', 'Date': 'ds'}, inplace=True)
  df.head()
  df1=df

  m = Prophet()
  m.fit(df)

  # Create Future dates
  future_prices = m.make_future_dataframe(periods=365)

  # Predict Prices
  forecast = m.predict(future_prices)
  forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()

  import matplotlib.dates as mdates

  # Dates
  starting_date = dt.datetime(2020, 10, 1)
  starting_date1 = mdates.date2num(starting_date)
  trend_date = dt.datetime(2021, 5, 7)
  trend_date1 = mdates.date2num(trend_date)

  pointing_arrow = dt.datetime(2020, 10, 1)
  pointing_arrow1 = mdates.date2num(pointing_arrow)

  # Learn more Prophet tomorrow and plot the forecast for Wipro.
  fig = m.plot(forecast)
  ax1 = fig.add_subplot(111)
  ax1.set_title("Axis Bank Stock Price Forecast", fontsize=16)
  ax1.set_xlabel("Date", fontsize=12)
  ax1.set_ylabel("Close Price", fontsize=12)

  # Forecast initialization arrow
  ax1.annotate('Forecast \n Initialization', xy=(pointing_arrow1, 1350), xytext=(starting_date1,1700),
              arrowprops=dict(facecolor='#ff7f50', shrink=0.1),
              )

  #Trend emphasis arrow
  ax1.annotate('Upward Trend', xy=(trend_date1, 1225), xytext=(trend_date1,950),
              arrowprops=dict(facecolor='#6cff6c', shrink=0.1),
              )

  # ax1.axhline(y=140, color='b', linestyle='-')

  plt.show()

  fig2 = m.plot_components(forecast)
  plt.show()

  m = Prophet(changepoint_prior_scale=0.01).fit(df)
  future = m.make_future_dataframe(periods=12, freq='M')
  fcst = m.predict(future)
  fig = m.plot(fcst)
  plt.title("Monthly Prediction \n 1 year time frame")

  plt.show()

  fcst1=fcst.head(1175)
  fcst1

  y_pred = fcst1['trend']
  from sklearn.metrics import mean_absolute_error
  print("MAE",mean_absolute_error(y_pred,df['y']))

  fig2 = m.plot_components(forecast)
  plt.show()

  # RMSE for Different hyperparameter
  import itertools
  import numpy as np
  import pandas as pd
  # Python
  from fbprophet.diagnostics import cross_validation
  param_grid = {  
      'changepoint_prior_scale': [0.001, 0.01, 0.1, 0.5],
      'seasonality_prior_scale': [0.01, 0.1, 1.0, 10.0],
  }
  cutoffs = pd.to_datetime(['2019-02-15', '2019-08-15', '2020-02-15'])
  # Generate all combinations of parameters
  all_params = [dict(zip(param_grid.keys(), v)) for v in itertools.product(*param_grid.values())]
  rmses = []  # Store the RMSEs for each params here

  # Use cross validation to evaluate all parameters
  for params in all_params:
      m = Prophet(**params).fit(df)  # Fit model with given params
      df_cv = cross_validation(m, cutoffs=cutoffs, horizon='30 days', parallel="processes")
      df_p = performance_metrics(df_cv, rolling_window=1)
      rmses.append(df_p['rmse'].values[0])

  # Find the best parameters
  tuning_results = pd.DataFrame(all_params)
  tuning_results['rmse'] = rmses
  print(tuning_results)





if __name__ == "__main__":
    print("PhD19006")
    stock_predict_prophet()